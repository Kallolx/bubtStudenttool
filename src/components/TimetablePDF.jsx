import { useEffect } from 'react';
import { jsPDF } from 'jspdf';

const TimetablePDF = ({ timetable, settings }) => {
  useEffect(() => {
    const doc = new jsPDF('l', 'mm', 'a4');
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();

    // Add header
    doc.setFontSize(20);
    doc.setFont('times', 'bold');
    doc.text(`Class Schedule - ${settings.semester} ${settings.year}`, pageWidth / 2, 20, {
      align: 'center',
    });

    // Add date range
    doc.setFontSize(12);
    if (settings.startDate && settings.endDate) {
      doc.text(`${settings.startDate} to ${settings.endDate}`, pageWidth / 2, 30, {
        align: 'center',
      });
    }

    // Calculate table dimensions
    const margin = 10;
    const cellWidth = (pageWidth - 2 * margin) / (timetable.timeSlots.length + 1);
    const cellHeight = 30;

    // Draw table headers
    doc.setFillColor(240, 240, 240);
    doc.rect(margin, 40, cellWidth, cellHeight, 'F');
    doc.setFontSize(14);
    doc.text('Day/Time', margin + cellWidth / 2, 40 + cellHeight / 2, {
      align: 'center',
      baseline: 'middle',
    });

    // Draw time slots
    timetable.timeSlots.forEach((time, index) => {
      const [startTime, endTime] = time.split(' - '); // Split time into start and end
      const x = margin + cellWidth * (index + 1);
      doc.rect(x, 40, cellWidth, cellHeight, 'F');

      // Set smaller font size for time slots
      doc.setFontSize(10);
      doc.text(startTime, x + cellWidth / 2, 40 + cellHeight / 4, { align: 'center', baseline: 'middle' });
      doc.text(endTime, x + cellWidth / 2, 40 + (3 * cellHeight) / 4, { align: 'center', baseline: 'middle' });
    });

    // Draw days and classes
    timetable.days.forEach((day, rowIndex) => {
      const y = 40 + cellHeight * (rowIndex + 1);

      // Day slot
      doc.rect(margin, y, cellWidth, cellHeight, 'S');
      doc.setFontSize(14);
      doc.text(day, margin + cellWidth / 2, y + cellHeight / 2, {
        align: 'center',
        baseline: 'middle',
      });

      // Classes for each time slot
      timetable.timeSlots.forEach((time, colIndex) => {
        const x = margin + cellWidth * (colIndex + 1);
        const classInfo = timetable.classes[`${day}-${time}`];

        doc.rect(x, y, cellWidth, cellHeight, 'S');
        if (classInfo?.name) {
          doc.setFontSize(10);
          doc.text(classInfo.name, x + cellWidth / 2, y + cellHeight / 2, {
            align: 'center',
            baseline: 'middle',
          });
        }
      });
    });

    // Add footer
    doc.setFontSize(10);
    doc.text('Generated by Student AI Tools', pageWidth - 50, pageHeight - 10);

    // Save the PDF
    doc.save(`Timetable_${settings.semester}_${settings.year}.pdf`);
  }, [timetable, settings]);

  return (
    <div>
      <h2 className="text-2xl font-bold">Your Timetable PDF is being generated...</h2>
    </div>
  );
};

export default TimetablePDF;
